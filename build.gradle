buildscript {
    ext {
        springBootVersion = '2.6.7'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    //id "com.moowork.node" version "1.3.1"
    id "com.github.node-gradle.node" version "2.2.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'signing'

apply plugin: 'jacoco'



compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "0.8.8"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jar {
    archiveBaseName = 'lifeplanSimulator'
    archiveVersion = '0.0.1-SNAPSHOT'
    enabled=false

    manifest {
        attributes("Implementation-Title"   : "Gradle",
                   "Implementation-Version" : archiveVersion)
    }
}

sourceCompatibility = 18
targetCompatibility = 18

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java',
                       'src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java',
                       'src/test/resources']
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // springboot
    implementation('org.springframework.boot:spring-boot-starter:2.6.7')
    implementation('org.springframework.boot:spring-boot-starter-cache:2.6.7')
    implementation('org.springframework.boot:spring-boot-starter-data-rest:2.6.7')
    implementation('org.springframework.boot:spring-boot-starter-hateoas:2.6.7')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa:2.6.7')
    implementation('org.springframework.boot:spring-boot-starter-data-rest:2.6.7')

    // db dao
    implementation('mysql:mysql-connector-java:8.0.29')
    implementation('com.h2database:h2:2.1.210')
    implementation('org.mybatis:mybatis:3.5.9')
    implementation('org.springframework.boot:spring-boot-starter-jdbc:2.6.7')
    implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2')

    // utilirty
    implementation('com.fasterxml.jackson.core:jackson-databind:2.13.2.2')
    compileOnly('org.projectlombok:lombok:1.18.24')
    annotationProcessor('org.projectlombok:lombok:1.18.24')
    implementation('com.fasterxml.jackson.core:jackson-core:2.13.3')
    implementation('com.fasterxml.jackson.core:jackson-databind:2.13.3')

    // test
    testImplementation('org.springframework.boot:spring-boot-starter-test:2.6.7')
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc:2.0.6.RELEASE')

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.mockito:mockito-inline:4.5.1'

}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'junit-vintage'
    }
}

task buildReact(type: YarnTask) {
    execOverrides {
        it.workingDir = './frontend'
    }
    args = ['build', 'start']
}

//build.dependsOn buildReact


// GradleでEclipseプロジェクト用ファイルをを生成するときのTips
// https://qiita.com/c9katayama/items/fd3d4028f8f6e97049f7

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.removeAll { entry -> (entry.path.endsWith('dll') || entry.path.endsWith('so') || entry.path.endsWith('dylib')) }
    }
}

eclipse.classpath.file {
    whenMerged {
        def jre_container = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
        jre_container.accessRules << new org.gradle.plugins.ide.eclipse.model.AccessRule("accessible", "javax/smartcardio/**")
    }
}

eclipse.project {
    buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
    natures 'org.eclipse.buildship.core.gradleprojectnature'
}

tasks.eclipse.doFirst {
    File prefs = file(".settings/org.eclipse.buildship.core.prefs")
    if(!prefs.exists()){
        prefs.append('''
            connection.project.dir=
            eclipse.preferences.version=1
            '''.stripIndent())
    }
}